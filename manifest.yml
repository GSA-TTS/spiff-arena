---
defaults: &defaults
  disk_quota: 3G
  instances: 1
  default-route: false
applications:

################################
- name: spiffworkflow((slug))-frontend
  <<: *defaults
  routes:
    - route: spiffworkflow((slug)).app.cloud.gov
  docker:
    image: ((frontend-image))
  memory: 256M
  env:
    APPLICATION_ROOT: "/"
    PORT0: "8080"
    SPIFFWORKFLOW_FRONTEND_RUNTIME_CONFIG_APP_ROUTING_STRATEGY: "path_based"
    SPIFFWORKFLOW_FRONTEND_RUNTIME_CONFIG_BACKEND_BASE_URL: "https://spiffworkflow((slug)).app.cloud.gov/api"
    BACKEND_BASE_URL: "https://spiffworkflow((slug)).app.cloud.gov/api"
    # We may need to set BACKEND_URL; see spiffworkflow-frontend/src/config/tsx:15-72

    # Other vars this image understands:
    # CYPRESS_RECORD_KEY
    # SPIFFWORKFLOW_FRONTEND_PORT
    # SPIFFWORKFLOW_FRONTEND_URL
    # CYPRESS_RECORD_KEY
    # REACT_APP_BACKEND_BASE_URL
    # PUBLIC_URL
    # NODE_ENV

#################################

- name: spiffworkflow((slug))-backend
  <<: *defaults
  disk_quota: 3G
  health-check-http-endpoint: /api/v1.0/status
  health-check-type: http
  routes:
    - route: spiffworkflow((slug)).app.cloud.gov/api
  services:
    - ((db-instance))
  # With buildpack:
  # path: spiffworkflow-backend
  # buildpacks:
  #   - python_buildpack
  # command: DATABASE_URL="$(echo $VCAP_SERVICES | jq --raw-output --arg service_name "((db-instance))" ".[][] | select(.name == \$service_name) | .credentials.uri")?sslmode=require" bin/boot_server_in_docker

  # With Docker:
  docker:
    image: ((backend-image))
  memory: 512M
  command: |
    # Get the postgres URI from the service binding. (SQL Alchemy insists on "postgresql://".ðŸ™„)
    export SPIFFWORKFLOW_BACKEND_DATABASE_URI=$( echo $VCAP_SERVICES | jq -r '.["aws-rds"][].credentials.uri' | sed -e s/postgres/postgresql/ )
    /app/bin/clone_process_models
    /app/bin/boot_server_in_docker
  # command: sleep 6000

  env:
    # All of the configuration variables are documented here:
    # https://github.com/sartography/spiff-arena/blob/main/spiffworkflow-backend/src/spiffworkflow_backend/config/default.py

    ### Requires VCAP env vars

    # VCAP_SERVICES

    # Rearrange later
    # https://github.com/sartography/spiff-arena/blob/293aa867a1cef056c5bee3ef037be31047fdc49e/spiffworkflow-backend/src/spiffworkflow_backend/config/default.py#L157-L179
    SPIFFWORKFLOW_BACKEND_GIT_COMMIT_ON_SAVE: "true"
    SPIFFWORKFLOW_BACKEND_GIT_PUBLISH_CLONE_URL: ((git-process-models-repo))
    SPIFFWORKFLOW_BACKEND_GIT_PUBLISH_TARGET_BRANCH: ((target-branch-for-publish))
    SPIFFWORKFLOW_BACKEND_GIT_SOURCE_BRANCH: ((source-branch)) # branch needs to exist, otherwise it can't clone it or commit to it on save
    SPIFFWORKFLOW_BACKEND_BPMN_SPEC_ABSOLUTE_DIR: "/app/process_models"
    SPIFFWORKFLOW_BACKEND_GIT_SSH_PRIVATE_KEY: ((github-ssh-key))

    # These do not appear to be necessary for the core functionality at this time. Since it doesnt use https anymore, and instead uses ssh,
    # having these does nothing, as the git history for commits will be tethered to the ssh key. We may use these later.
    # SPIFFWORKFLOW_BACKEND_GIT_USERNAME:
    # SPIFFWORKFLOW_BACKEND_GIT_USER_EMAIL:
    # SPIFFWORKFLOW_BACKEND_GIT_SSH_PRIVATE_KEY_PATH:
    # https://github.com/gsa-tts/spiff-arena/blob/main/spiffworkflow-backend/bin/git_commit_bpmn_models_repo
    # https://github.com/gsa-tts/spiff-arena/blob/main/spiffworkflow-backend/bin/clone_process_models
    # https://github.com/gsa-tts/spiff-arena/blob/main/spiffworkflow-backend/bin/find_sample_process_models

    # Hardcoded
    FLASK_DEBUG: "0"
    APPLICATION_ROOT: "/"
    SPIFFWORKFLOW_BACKEND_USE_WERKZEUG_MIDDLEWARE_PROXY_FIX: "true"
    SPIFFWORKFLOW_BACKEND_WSGI_PATH_PREFIX: "/api"
    # spiffworkflow_backend.config.ConfigurationError: SPIFFWORKFLOW_BACKEND_URL_FOR_FRONTEND and SPIFFWORKFLOW_BACKEND_URL are incompatible. We need backend to set cookies for frontend, so they need to be on the same domain. A common setup is to have frontend on example.com and backend on api.example.com. If you do not need this functionality, you can avoid this check by setting environment variable SPIFFWORKFLOW_BACKEND_CHECK_FRONTEND_AND_BACKEND_URL_COMPATIBILITY=false
    SPIFFWORKFLOW_BACKEND_CHECK_FRONTEND_AND_BACKEND_URL_COMPATIBILITY: "false"
    SPIFFWORKFLOW_BACKEND_ENV: "local_docker"
    SPIFFWORKFLOW_BACKEND_DATABASE_TYPE: "postgres"
    SPIFFWORKFLOW_BACKEND_LOAD_FIXTURE_DATA: "false"
    SPIFFWORKFLOW_BACKEND_LOG_LEVEL: "INFO"
    SPIFFWORKFLOW_BACKEND_OPEN_ID_CLIENT_ID: "spiffworkflow-backend"
    SPIFFWORKFLOW_BACKEND_PERMISSIONS_FILE_NAME: "example.yml"
    SPIFFWORKFLOW_BACKEND_PORT: "8080"
    SPIFFWORKFLOW_BACKEND_RUN_BACKGROUND_SCHEDULER_IN_CREATE_APP: "true"
    SPIFFWORKFLOW_BACKEND_UPGRADE_DB: "true"

    # vars.yml (or CLI)
    FLASK_SESSION_SECRET_KEY: ((backend-flask-session-key))
    SPIFFWORKFLOW_BACKEND_OPEN_ID_CLIENT_SECRET_KEY: "((openid-secret))"
    SPIFFWORKFLOW_BACKEND_OPEN_ID_SERVER_URL: "https://spiffworkflow((slug)).app.cloud.gov/api/openid"
    SPIFFWORKFLOW_BACKEND_URL: "https://spiffworkflow((slug)).app.cloud.gov/api"
    SPIFFWORKFLOW_BACKEND_URL_FOR_FRONTEND: "https://spiffworkflow((slug)).app.cloud.gov"
    SPIFFWORKFLOW_BACKEND_CONNECTOR_PROXY_URL: "https://spiffworkflow-connector((slug)).app.cloud.gov"

    #   - SPIFFWORKFLOW_BACKEND_DATABASE_URI=mysql+mysqldb://root:${SPIFFWORKFLOW_BACKEND_MYSQL_ROOT_DATABASE:-my-secret-pw}@127.0.0.1:7003/${SPIFFWORKFLOW_BACKEND_DATABASE_NAME:-spiffworkflow_backend_development}
    #   - SPIFFWORKFLOW_BACKEND_OPEN_ID_SERVER_URL=http://localhost:7002/realms/spiffworkflow

